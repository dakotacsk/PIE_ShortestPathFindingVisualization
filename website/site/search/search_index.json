{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to PathFinders \ud83d\ude80 Discover the Future of Algorithmic Exploration \ud83d\ude80 PathFinder isn't just a game \u2014 it's an adventure into the world of pathfinding algorithm visualizations . Whether you're a gamer, a curious mind, or an educator, PathFinder brings the complex world of Q-learning and Dijkstra's to life in a way that's engaging, educational, and just plain fun. \ud83d\udcf8 Game Snapshots Take a sneak peek into the world of PathFinder! \ud83c\udfae Features Arcade-Style Gameplay : Immerse yourself in a hands-on learning experience with sleek visuals and intuitive controls. Interactive Algorithms : Visualize and interact with complex concepts like Dijkstra\u2019s Algorithm and Q-Learning through real-time simulations. Challenge Your Intellect : Test your problem-solving skills while learning about decision-making and optimization techniques. \ud83d\udee0\ufe0f Build Your Own Inspired to create something similar? We\u2019ve got you covered. Access our open-source resources and guides to make your own version of PathFinder: \ud83d\udcbe Download Game \ud83c\udf89 Join the Journey Stay updated with our latest features, contribute ideas, or just get to know the amazing team behind this. \ud83e\udd1d Meet the Team \ud83d\udc49 Follow us on GitHub","title":"Home"},{"location":"#welcome-to-pathfinders","text":"\ud83d\ude80 Discover the Future of Algorithmic Exploration \ud83d\ude80 PathFinder isn't just a game \u2014 it's an adventure into the world of pathfinding algorithm visualizations . Whether you're a gamer, a curious mind, or an educator, PathFinder brings the complex world of Q-learning and Dijkstra's to life in a way that's engaging, educational, and just plain fun.","title":"Welcome to PathFinders"},{"location":"#game-snapshots","text":"Take a sneak peek into the world of PathFinder!","title":"\ud83d\udcf8 Game Snapshots"},{"location":"#features","text":"Arcade-Style Gameplay : Immerse yourself in a hands-on learning experience with sleek visuals and intuitive controls. Interactive Algorithms : Visualize and interact with complex concepts like Dijkstra\u2019s Algorithm and Q-Learning through real-time simulations. Challenge Your Intellect : Test your problem-solving skills while learning about decision-making and optimization techniques.","title":"\ud83c\udfae Features"},{"location":"#build-your-own","text":"Inspired to create something similar? We\u2019ve got you covered. Access our open-source resources and guides to make your own version of PathFinder: \ud83d\udcbe Download Game","title":"\ud83d\udee0\ufe0f Build Your Own"},{"location":"#join-the-journey","text":"Stay updated with our latest features, contribute ideas, or just get to know the amazing team behind this. \ud83e\udd1d Meet the Team \ud83d\udc49 Follow us on GitHub","title":"\ud83c\udf89 Join the Journey"},{"location":"download/","text":"Download for yourself to try! Download game Windows MacOS Linux Download source code from github > git clone https://github.com/dakotacsk/PIE_ShortestPathFindingVisualization > cd PIE_ShortestPathFindingVisualization","title":"Download!"},{"location":"download/#download-for-yourself-to-try","text":"","title":"Download for yourself to try!"},{"location":"download/#download-game","text":"Windows MacOS Linux","title":"Download game"},{"location":"download/#download-source-code-from-github","text":"> git clone https://github.com/dakotacsk/PIE_ShortestPathFindingVisualization > cd PIE_ShortestPathFindingVisualization","title":"Download source code from github"},{"location":"team/","text":"Our team combines expertise in software development, mechanical engineering, and UI/UX design to bring PathFinder to life. Meet the passionate individuals behind the project: Dakota Role : Pathfinding Algorithm Specialist & UI/UX Designer Dakota is focused on understanding pathfinding algorithms, designing user-friendly interfaces, and creating physical demonstrations of abstract concepts. Vishnu Role : Raspberry Pi Integration & Pathfinding Algorithms Vishnu specializes in integrating software with Raspberry Pi, working on approachable UI design, and exploring pathfinding algorithms. Khoi Role : Mechanical-Software Bridge & Real-Time Visuals Khoi bridges the gap between mechanical and software components, creating real-time digital visuals and ensuring seamless integration. Chris Role : Mechanical, Electrical, and Software Design Integration Chris excels at integrating mechanical, electrical, and software designs into cohesive, functional systems inspired by 1980s arcade machines.","title":"Meet the Team"},{"location":"team/#meet-the-passionate-individuals-behind-the-project","text":"","title":"Meet the passionate individuals behind the project:"},{"location":"team/#dakota","text":"Role : Pathfinding Algorithm Specialist & UI/UX Designer Dakota is focused on understanding pathfinding algorithms, designing user-friendly interfaces, and creating physical demonstrations of abstract concepts.","title":"Dakota"},{"location":"team/#vishnu","text":"Role : Raspberry Pi Integration & Pathfinding Algorithms Vishnu specializes in integrating software with Raspberry Pi, working on approachable UI design, and exploring pathfinding algorithms.","title":"Vishnu"},{"location":"team/#khoi","text":"Role : Mechanical-Software Bridge & Real-Time Visuals Khoi bridges the gap between mechanical and software components, creating real-time digital visuals and ensuring seamless integration.","title":"Khoi"},{"location":"team/#chris","text":"Role : Mechanical, Electrical, and Software Design Integration Chris excels at integrating mechanical, electrical, and software designs into cohesive, functional systems inspired by 1980s arcade machines.","title":"Chris"},{"location":"project/meche_ece/","text":"Mechanical and Electrical Design Final Technical Overview Mechanical Design Description : Provide an overview of the mechanical components, including key design features and specifications. CAD Renderings : Insert CAD images or renderings here (or link to assets if applicable). Electrical Design Circuit Diagrams : Include circuit diagrams or schematics here (even rough hand-drawn versions are fine). Component List : Provide a list of electrical components used and their roles. Analysis Document any relevant analysis of the mechanical or electrical systems, including: Stress analysis, simulations, or testing results for mechanical systems. Current, voltage, or signal flow analysis for electrical systems. Process Design Decisions Outline the major mechanical and electrical design choices made and why. Discuss alternatives considered and how time/budget constraints influenced the final design. Challenges Highlight challenges encountered in mechanical/electrical development and how they were resolved. Progress Timeline Provide a short timeline or milestones for mechanical/electrical progress.","title":"Mechanical"},{"location":"project/meche_ece/#mechanical-and-electrical-design","text":"","title":"Mechanical and Electrical Design"},{"location":"project/meche_ece/#final-technical-overview","text":"","title":"Final Technical Overview"},{"location":"project/meche_ece/#mechanical-design","text":"Description : Provide an overview of the mechanical components, including key design features and specifications. CAD Renderings : Insert CAD images or renderings here (or link to assets if applicable).","title":"Mechanical Design"},{"location":"project/meche_ece/#electrical-design","text":"Circuit Diagrams : Include circuit diagrams or schematics here (even rough hand-drawn versions are fine). Component List : Provide a list of electrical components used and their roles.","title":"Electrical Design"},{"location":"project/meche_ece/#analysis","text":"Document any relevant analysis of the mechanical or electrical systems, including: Stress analysis, simulations, or testing results for mechanical systems. Current, voltage, or signal flow analysis for electrical systems.","title":"Analysis"},{"location":"project/meche_ece/#process","text":"","title":"Process"},{"location":"project/meche_ece/#design-decisions","text":"Outline the major mechanical and electrical design choices made and why. Discuss alternatives considered and how time/budget constraints influenced the final design.","title":"Design Decisions"},{"location":"project/meche_ece/#challenges","text":"Highlight challenges encountered in mechanical/electrical development and how they were resolved.","title":"Challenges"},{"location":"project/meche_ece/#progress-timeline","text":"Provide a short timeline or milestones for mechanical/electrical progress.","title":"Progress Timeline"},{"location":"project/project/","text":"Project Overview Table of Contents Budget and Components Media Electrical and Mechanical Design Software and Firmware Design Diagrams Budget and Components Spending Breakdown Provide a table listing all components, their costs, and sources. PLACEHOLDER : Fill in actual component data in the table below. Component/Material Cost (USD) Source Example Component 1 $XX Example Source Example Component 2 Free (Estimated: $XX) Donated or Provided Example Component 3 $XX Purchased/Online Total Estimated Cost : PLACEHOLDER : Add total value. Media Final System in Action Add images and videos of the final project setup. PLACEHOLDER : Replace this with images and videos of your system in action. Example : Figure: Completed arcade machine showcasing the game. Demo Video Link to a video demo of the project. PLACEHOLDER : Add demo video link here. Example : Watch the Demo Video Electrical and Mechanical Design Electrical Design Provide a description of the electrical system, including connections, power requirements, and analysis. PLACEHOLDER : Add description of electrical components. Include details on power supply, wiring, and voltage/current analysis. Replace this placeholder with actual circuit diagrams and notes. Example : Figure: Circuit schematic showing connections between components. Diagrams Data and Energy Flow Diagram Insert a high-level diagram showing how energy and data move through the system. PLACEHOLDER : Add data and energy flow diagram. Example : Figure: Data and energy flow in the arcade system. Subsystem Diagrams Include additional diagrams that illustrate subsystem connections or component relationships. PLACEHOLDER : Add subsystem diagrams (e.g., mechanical, electrical, or software). Example : Figure: Subsystem relationships across hardware, software, and firmware. Conclusion PLACEHOLDER : Add a brief conclusion summarizing the project's success, challenges overcome, and key learnings.","title":"Overview"},{"location":"project/project/#project-overview","text":"","title":"Project Overview"},{"location":"project/project/#table-of-contents","text":"Budget and Components Media Electrical and Mechanical Design Software and Firmware Design Diagrams","title":"Table of Contents"},{"location":"project/project/#budget-and-components","text":"","title":"Budget and Components"},{"location":"project/project/#spending-breakdown","text":"Provide a table listing all components, their costs, and sources. PLACEHOLDER : Fill in actual component data in the table below. Component/Material Cost (USD) Source Example Component 1 $XX Example Source Example Component 2 Free (Estimated: $XX) Donated or Provided Example Component 3 $XX Purchased/Online Total Estimated Cost : PLACEHOLDER : Add total value.","title":"Spending Breakdown"},{"location":"project/project/#media","text":"","title":"Media"},{"location":"project/project/#final-system-in-action","text":"Add images and videos of the final project setup. PLACEHOLDER : Replace this with images and videos of your system in action. Example : Figure: Completed arcade machine showcasing the game.","title":"Final System in Action"},{"location":"project/project/#demo-video","text":"Link to a video demo of the project. PLACEHOLDER : Add demo video link here. Example : Watch the Demo Video","title":"Demo Video"},{"location":"project/project/#electrical-and-mechanical-design","text":"","title":"Electrical and Mechanical Design"},{"location":"project/project/#electrical-design","text":"Provide a description of the electrical system, including connections, power requirements, and analysis. PLACEHOLDER : Add description of electrical components. Include details on power supply, wiring, and voltage/current analysis. Replace this placeholder with actual circuit diagrams and notes. Example : Figure: Circuit schematic showing connections between components.","title":"Electrical Design"},{"location":"project/project/#diagrams","text":"","title":"Diagrams"},{"location":"project/project/#data-and-energy-flow-diagram","text":"Insert a high-level diagram showing how energy and data move through the system. PLACEHOLDER : Add data and energy flow diagram. Example : Figure: Data and energy flow in the arcade system.","title":"Data and Energy Flow Diagram"},{"location":"project/project/#subsystem-diagrams","text":"Include additional diagrams that illustrate subsystem connections or component relationships. PLACEHOLDER : Add subsystem diagrams (e.g., mechanical, electrical, or software). Example : Figure: Subsystem relationships across hardware, software, and firmware.","title":"Subsystem Diagrams"},{"location":"project/project/#conclusion","text":"PLACEHOLDER : Add a brief conclusion summarizing the project's success, challenges overcome, and key learnings.","title":"Conclusion"},{"location":"project/software_firmware/","text":"Software and Firmware Design Software Design The software for Hatchling's Quest: Pathfinding Trials is designed to deliver an intuitive, engaging, and educational gaming experience while visualizing pathfinding algorithms in action. Software Architecture Software Structure and Key Modules Overview: The software is divided into three main areas: Game Interface : Handles the GUI, animations, and user input using Pygame . Pathfinding Algorithms : Dijkstra's Algorithm (Level 1): Computes shortest paths. Q-Learning (Level 2): Enables reward-based navigation. Game Logic : Manages screens, game states, and leaderboards. Key Modules: run_game.py : Coordinates game flow. grid/grid.py : Defines the pathfinding grid. Pathfinding Modules : sprites/DijkstraSprite.py : Implements Dijkstra\u2019s Algorithm. sprites/QLearningSprite.py : Implements Q-Learning. Screens : Main menu, instructions, and interactive gameplay feedback. Leaderboard : Tracks and displays high scores via leaderboard/leaderboard.py . Dependencies The software relies on the following external libraries: Python 3.11.7 : Core language used for development. NumPy (2.2.0) : Used for matrix operations in Q-Learning, including Q-table computations. Pygame (2.6.1) : Provides the framework for rendering the game interface and managing user input. Flow Diagram for Game The following flow diagram illustrates the architecture and flow of the game, showing transitions between levels, screens, and algorithms: Figure: Flow diagram representing game architecture and flow. UML Diagram The UML diagram below showcases the architecture and relationships within the game. It highlights key components, such as the flow between screens, sprite classes, and grid interactions, as well as how algorithms like Dijkstra's and Q-Learning are integrated: Figure: UML diagram representing the game architecture and component relationships. Link to Source Code The complete source code for the project is hosted on GitHub: GitHub Repo Link Firmware Design Provide details on the firmware (e.g., Arduino logic), including tasks like LED control or input handling. PLACEHOLDER : Add firmware design description. Example Snippet : // Placeholder: LED Button Control Logic if (buttonPressed) { digitalWrite(LED_PIN, HIGH); } else { digitalWrite(LED_PIN, LOW); } Link to Source Code : PLACEHOLDER: Firmware Repo Link","title":"Software & Firmware"},{"location":"project/software_firmware/#software-and-firmware-design","text":"","title":"Software and Firmware Design"},{"location":"project/software_firmware/#software-design","text":"The software for Hatchling's Quest: Pathfinding Trials is designed to deliver an intuitive, engaging, and educational gaming experience while visualizing pathfinding algorithms in action.","title":"Software Design"},{"location":"project/software_firmware/#software-structure-and-key-modules","text":"","title":"Software Structure and Key Modules"},{"location":"project/software_firmware/#firmware-design","text":"Provide details on the firmware (e.g., Arduino logic), including tasks like LED control or input handling. PLACEHOLDER : Add firmware design description. Example Snippet : // Placeholder: LED Button Control Logic if (buttonPressed) { digitalWrite(LED_PIN, HIGH); } else { digitalWrite(LED_PIN, LOW); } Link to Source Code : PLACEHOLDER: Firmware Repo Link","title":"Firmware Design"}]}