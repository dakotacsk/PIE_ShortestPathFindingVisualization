{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to PathFinders \ud83d\ude80 Discover the Future of Algorithmic Exploration \ud83d\ude80 PathFinder isn't just a game \u2014 it's an adventure into the world of pathfinding algorithm visualizations . Whether you're a gamer, a curious mind, or an educator, PathFinder brings the complex world of Q-learning and Dijkstra's to life in a way that's engaging, educational, and just plain fun. \ud83d\udcf8 Game Snapshots Take a sneak peek into the world of PathFinder! \ud83c\udfae Features Arcade-Style Gameplay : Immerse yourself in a hands-on learning experience with sleek visuals and intuitive controls. Interactive Algorithms : Visualize and interact with complex concepts like Dijkstra\u2019s Algorithm and Q-Learning through real-time simulations. Challenge Your Intellect : Test your problem-solving skills while learning about decision-making and optimization techniques. \ud83d\udee0\ufe0f Build Your Own Inspired to create something similar? We\u2019ve got you covered. Access our open-source resources and guides to make your own version of PathFinder: \ud83d\udcbe Download Game \ud83c\udf89 Join the Journey Stay updated with our latest features, contribute ideas, or just get to know the amazing team behind this. \ud83e\udd1d Meet the Team \ud83d\udc49 Follow us on GitHub","title":"Home"},{"location":"#welcome-to-pathfinders","text":"\ud83d\ude80 Discover the Future of Algorithmic Exploration \ud83d\ude80 PathFinder isn't just a game \u2014 it's an adventure into the world of pathfinding algorithm visualizations . Whether you're a gamer, a curious mind, or an educator, PathFinder brings the complex world of Q-learning and Dijkstra's to life in a way that's engaging, educational, and just plain fun.","title":"Welcome to PathFinders"},{"location":"#game-snapshots","text":"Take a sneak peek into the world of PathFinder!","title":"\ud83d\udcf8 Game Snapshots"},{"location":"#features","text":"Arcade-Style Gameplay : Immerse yourself in a hands-on learning experience with sleek visuals and intuitive controls. Interactive Algorithms : Visualize and interact with complex concepts like Dijkstra\u2019s Algorithm and Q-Learning through real-time simulations. Challenge Your Intellect : Test your problem-solving skills while learning about decision-making and optimization techniques.","title":"\ud83c\udfae Features"},{"location":"#build-your-own","text":"Inspired to create something similar? We\u2019ve got you covered. Access our open-source resources and guides to make your own version of PathFinder: \ud83d\udcbe Download Game","title":"\ud83d\udee0\ufe0f Build Your Own"},{"location":"#join-the-journey","text":"Stay updated with our latest features, contribute ideas, or just get to know the amazing team behind this. \ud83e\udd1d Meet the Team \ud83d\udc49 Follow us on GitHub","title":"\ud83c\udf89 Join the Journey"},{"location":"download/","text":"Download for yourself to try! Download game Windows MacOS Linux Download source code from github > git clone https://github.com/dakotacsk/PIE_ShortestPathFindingVisualization > cd PIE_ShortestPathFindingVisualization","title":"Download!"},{"location":"download/#download-for-yourself-to-try","text":"","title":"Download for yourself to try!"},{"location":"download/#download-game","text":"Windows MacOS Linux","title":"Download game"},{"location":"download/#download-source-code-from-github","text":"> git clone https://github.com/dakotacsk/PIE_ShortestPathFindingVisualization > cd PIE_ShortestPathFindingVisualization","title":"Download source code from github"},{"location":"project/","text":"Project Overview Table of Contents Budget and Components Media Electrical and Mechanical Design Software and Firmware Design Diagrams Budget and Components Spending Breakdown Provide a table listing all components, their costs, and sources. PLACEHOLDER : Fill in actual component data in the table below. Component/Material Cost (USD) Source Example Component 1 $XX Example Source Example Component 2 Free (Estimated: $XX) Donated or Provided Example Component 3 $XX Purchased/Online Total Estimated Cost : PLACEHOLDER : Add total value. Media Final System in Action Add images and videos of the final project setup. PLACEHOLDER : Replace this with images and videos of your system in action. Example : Figure: Completed arcade machine showcasing the game. Demo Video Link to a video demo of the project. PLACEHOLDER : Add demo video link here. Example : Watch the Demo Video Electrical and Mechanical Design Electrical Design Provide a description of the electrical system, including connections, power requirements, and analysis. PLACEHOLDER : Add description of electrical components. Include details on power supply, wiring, and voltage/current analysis. Replace this placeholder with actual circuit diagrams and notes. Example : Figure: Circuit schematic showing connections between components. Mechanical Design Describe the mechanical structure of the system, materials used, and analysis. PLACEHOLDER : Add mechanical design description. Describe materials (e.g., MDF, PLA) and fabrication process. Include CAD images or hand-drawn designs as applicable. Example : Figure: CAD rendering of the arcade machine. Software and Firmware Design Software Design Provide details on the software architecture, key modules, and external dependencies. PLACEHOLDER : Add software architecture and description. Include pathfinding logic (Dijkstra's Algorithm and Q-Learning). Describe dependencies such as Pygame, NumPy, or OpenCV. Flow Diagram for Game : Figure: Flow diagram representing game architecture and flow. Link to Source Code : PLACEHOLDER: GitHub Repo Link Firmware Design Provide details on the firmware (e.g., Arduino logic), including tasks like LED control or input handling. PLACEHOLDER : Add firmware design description. Example Snippet : // Placeholder: LED Button Control Logic if (buttonPressed) { digitalWrite(LED_PIN, HIGH); } else { digitalWrite(LED_PIN, LOW); } Link to Source Code : PLACEHOLDER: Firmware Repo Link Diagrams Data and Energy Flow Diagram Insert a high-level diagram showing how energy and data move through the system. PLACEHOLDER : Add data and energy flow diagram. Example : Figure: Data and energy flow in the arcade system. Subsystem Diagrams Include additional diagrams that illustrate subsystem connections or component relationships. PLACEHOLDER : Add subsystem diagrams (e.g., mechanical, electrical, or software). Example : Figure: Subsystem relationships across hardware, software, and firmware. Conclusion PLACEHOLDER : Add a brief conclusion summarizing the project's success, challenges overcome, and key learnings.","title":"Project Overview"},{"location":"project/#project-overview","text":"","title":"Project Overview"},{"location":"project/#table-of-contents","text":"Budget and Components Media Electrical and Mechanical Design Software and Firmware Design Diagrams","title":"Table of Contents"},{"location":"project/#budget-and-components","text":"","title":"Budget and Components"},{"location":"project/#spending-breakdown","text":"Provide a table listing all components, their costs, and sources. PLACEHOLDER : Fill in actual component data in the table below. Component/Material Cost (USD) Source Example Component 1 $XX Example Source Example Component 2 Free (Estimated: $XX) Donated or Provided Example Component 3 $XX Purchased/Online Total Estimated Cost : PLACEHOLDER : Add total value.","title":"Spending Breakdown"},{"location":"project/#media","text":"","title":"Media"},{"location":"project/#final-system-in-action","text":"Add images and videos of the final project setup. PLACEHOLDER : Replace this with images and videos of your system in action. Example : Figure: Completed arcade machine showcasing the game.","title":"Final System in Action"},{"location":"project/#demo-video","text":"Link to a video demo of the project. PLACEHOLDER : Add demo video link here. Example : Watch the Demo Video","title":"Demo Video"},{"location":"project/#electrical-and-mechanical-design","text":"","title":"Electrical and Mechanical Design"},{"location":"project/#electrical-design","text":"Provide a description of the electrical system, including connections, power requirements, and analysis. PLACEHOLDER : Add description of electrical components. Include details on power supply, wiring, and voltage/current analysis. Replace this placeholder with actual circuit diagrams and notes. Example : Figure: Circuit schematic showing connections between components.","title":"Electrical Design"},{"location":"project/#mechanical-design","text":"Describe the mechanical structure of the system, materials used, and analysis. PLACEHOLDER : Add mechanical design description. Describe materials (e.g., MDF, PLA) and fabrication process. Include CAD images or hand-drawn designs as applicable. Example : Figure: CAD rendering of the arcade machine.","title":"Mechanical Design"},{"location":"project/#software-and-firmware-design","text":"","title":"Software and Firmware Design"},{"location":"project/#software-design","text":"Provide details on the software architecture, key modules, and external dependencies. PLACEHOLDER : Add software architecture and description. Include pathfinding logic (Dijkstra's Algorithm and Q-Learning). Describe dependencies such as Pygame, NumPy, or OpenCV. Flow Diagram for Game : Figure: Flow diagram representing game architecture and flow. Link to Source Code : PLACEHOLDER: GitHub Repo Link","title":"Software Design"},{"location":"project/#firmware-design","text":"Provide details on the firmware (e.g., Arduino logic), including tasks like LED control or input handling. PLACEHOLDER : Add firmware design description. Example Snippet : // Placeholder: LED Button Control Logic if (buttonPressed) { digitalWrite(LED_PIN, HIGH); } else { digitalWrite(LED_PIN, LOW); } Link to Source Code : PLACEHOLDER: Firmware Repo Link","title":"Firmware Design"},{"location":"project/#diagrams","text":"","title":"Diagrams"},{"location":"project/#data-and-energy-flow-diagram","text":"Insert a high-level diagram showing how energy and data move through the system. PLACEHOLDER : Add data and energy flow diagram. Example : Figure: Data and energy flow in the arcade system.","title":"Data and Energy Flow Diagram"},{"location":"project/#subsystem-diagrams","text":"Include additional diagrams that illustrate subsystem connections or component relationships. PLACEHOLDER : Add subsystem diagrams (e.g., mechanical, electrical, or software). Example : Figure: Subsystem relationships across hardware, software, and firmware.","title":"Subsystem Diagrams"},{"location":"project/#conclusion","text":"PLACEHOLDER : Add a brief conclusion summarizing the project's success, challenges overcome, and key learnings.","title":"Conclusion"},{"location":"team/","text":"Our team combines expertise in software development, mechanical engineering, and UI/UX design to bring PathFinder to life. Meet the passionate individuals behind the project: Dakota Role : Pathfinding Algorithm Specialist & UI/UX Designer Dakota is focused on understanding pathfinding algorithms, designing user-friendly interfaces, and creating physical demonstrations of abstract concepts. Vishnu Role : Raspberry Pi Integration & Pathfinding Algorithms Vishnu specializes in integrating software with Raspberry Pi, working on approachable UI design, and exploring pathfinding algorithms. Khoi Role : Mechanical-Software Bridge & Real-Time Visuals Khoi bridges the gap between mechanical and software components, creating real-time digital visuals and ensuring seamless integration. Chris Role : Mechanical, Electrical, and Software Design Integration Chris excels at integrating mechanical, electrical, and software designs into cohesive, functional systems inspired by 1980s arcade machines.","title":"Meet the Team"},{"location":"team/#meet-the-passionate-individuals-behind-the-project","text":"","title":"Meet the passionate individuals behind the project:"},{"location":"team/#dakota","text":"Role : Pathfinding Algorithm Specialist & UI/UX Designer Dakota is focused on understanding pathfinding algorithms, designing user-friendly interfaces, and creating physical demonstrations of abstract concepts.","title":"Dakota"},{"location":"team/#vishnu","text":"Role : Raspberry Pi Integration & Pathfinding Algorithms Vishnu specializes in integrating software with Raspberry Pi, working on approachable UI design, and exploring pathfinding algorithms.","title":"Vishnu"},{"location":"team/#khoi","text":"Role : Mechanical-Software Bridge & Real-Time Visuals Khoi bridges the gap between mechanical and software components, creating real-time digital visuals and ensuring seamless integration.","title":"Khoi"},{"location":"team/#chris","text":"Role : Mechanical, Electrical, and Software Design Integration Chris excels at integrating mechanical, electrical, and software designs into cohesive, functional systems inspired by 1980s arcade machines.","title":"Chris"}]}